#!/usr/bin/env python3
""" NYPR ECS Deployment Tool.

Usage:
  ecs_deploy build  [--build-tag=<tag>] [--no-use-cache]
  ecs_deploy test   [--build-tag=<tag>] [--test-cmd=<cmd>]
  ecs_deploy deploy --env=<env> --memory-reservation=<kb>
                    [--build-tag=<tag>] [--no-service]
                    [--memory-reservation-hard] [--cpu=<num>]
                    [--port=<port> ...] [--timeout=<seconds>]
                    [(--cmd=<cmd> --role=<role>)]
  ecs_deploy cleanup --env=<env> --revisions-to-keep=<num> [--role=<role>]

Options:
  -h --help                     Show this screen.
  --version                     Show version.
  --build-tag=<tag>             Manually specify a build tag.

  # build
  --no-use-cache                Do not use cached files.

  # test
  --test-cmd=<cmd>              Test command [default: python setup.py test]

  # deploy
  --env=<env>                   Environment (eg. dev|demo|prod|util)
  --memory-reservation=<kb>     Memory reservation size for container in KB.
  --no-service                  Flag to set non-persistent task.
  --memory-reservation-hard     Flag to set memory reservation to a hard.
  --cpu=<num>                   CPU credit limit for container.
  --port=<port>                 Port for the container to expose.
  --timeout=<seconds>           How long to wait for old ECS services to stop.
                                [default: 300]
  --cmd=<cmd>                   Command override for ECS task, specified
                                as a comma-delimited string.
  --role=<role>                 Must be provided if --cmd is provided,
                                used to distinguish between tasks/services
                                for repos that require multiple containers to
                                run (eg. a worker and web interface).

  # cleanup
  --revisions-to-keep=<num>     How many previous task definitions to preserve
"""
from deploy import ECSDeploy
from docopt import docopt


def enforce_types(args):
    if args['--memory-reservation']:
        args['--memory-reservation'] = int(args['--memory-reservation'])
    if args['--cpu']:
        args['--cpu'] = int(args['--cpu'])
    if args['--timeout']:
        args['--timeout'] = int(args['--timeout'])
    if args['--port']:
        args['--port'] = [int(p) for p in args['--port']]
    if args['--revisions-to-keep']:
        args['--revisions-to-keep'] = int(args['--revisions-to-keep'])
    if args['--cmd']:
        args['--cmd'] = args['--cmd'].split(',')
    return args


if __name__ == '__main__':
    args = docopt(__doc__)
    args = enforce_types(args)

    # supports passing --build-tag manually
    # or via environment variable (CircleCI default behavior)
    if args['--build-tag']:
        ecs_deploy = ECSDeploy(build_tag=args['--build-tag'])
    else:
        ecs_deploy = ECSDeploy()

    if args['build']:
        ecs_deploy.build_docker_img(no_use_cache=args['--no-use-cache'])

    elif args['test']:
        ecs_deploy.test_docker_img(test_command=args['--test-cmd'])

    elif args['deploy']:
        ecs_deploy.deploy(
            env=args['--env'],
            no_service=args['--no-service'],
            memory_reservation=args['--memory-reservation'],
            memory_reservation_hard=args['--memory-reservation-hard'],
            cpu=args['--cpu'],
            ports=args['--port'],
            timeout=args['--timeout'],
            cmd=args['--cmd'],
            role=args['--role']
        )

    elif args['cleanup']:
        ecs_deploy.deregister_task_defs(
            env=args['--env'],
            revisions_to_keep=args['--revisions-to-keep'],
            role=args['--role']
        )
